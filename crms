#!/usr/bin/env python3

import sys
import os
# import pathlib
import git
from git import Repo
import subprocess
import argparse
import yaml

def crms_conf(dir_path, args):

    #### CRMS Config Directory
    path_crms = os.path.join(dir_path, ".crms")
    if not os.path.exists(path_crms) :
        os.makedirs(path_crms)
        print("The new .crms directory is created !!!")

    #### CRMS Config File
    configs = { 'git': {'remote' : args.git_remote_url }, 
                'dvc' : {'remote': args.dvc_remote_base }} 
    
    path_config = os.path.join(path_crms, "config")
    with open(path_config, 'w') as f:
        yaml.dump(configs, f, sort_keys=False)


    # with open(path_config, "wt") as f :
    #     f.write("[git]\n")
    #     f.write("    remote = {}\n".format(args.git_remote_url))
    #     f.write("[dvc]\n")
    #     f.write("    remote = {}\n".format(args.dvc_remote_base))
    
    print("CRMS Configurations are stored into .crms/config !!!")
    

def crms_init(dir_path, args):

    #### Checke CRMS Config File Existence
    path_config = os.path.join(dir_path, ".crms", "config")
    if not os.path.exists(path_config) :
        print("CRMS ERROR: crms conf must be called before crms init")
        sys.exit(-1)

    #### Add model_name to crms config file 
    with open(path_config) as f:
        configs = yaml.load(f, Loader=yaml.FullLoader)
        print(configs)

    configs['model'] = {'name': args.model_name}
    with open(path_config, 'w') as f:
        yaml.dump(configs, f, sort_keys=False)

    #### Git Repository 
    try :
        repo = Repo(dir_path)  # 'git init '  must be prepared before 'crms init'
    except git.exc.InvalidGitRepositoryError:
        repo = Repo.init(dir_path)        
        print("Git initialized...")
    except git.exc.NoSuchPathError :
        print("Error: gir repoistory path could not be access by the system.")
        sys.exit(-1)
    except :
        print("Error: Unknown error occured while crms init")
        sys.exit(-1)
    finally :
        print("CRMS uses Git Local Repository (" + dir_path + ")")        

    #### git remote add origin ~~~~   # 'git remote add origin ~~ '  must be prepared before 'crms init'
    if len(repo.remotes) > 0 :
        repo.delete_remote('origin')

    origin = repo.create_remote('origin', configs['git']['remote'])


    #### DVC INIT
    p = subprocess.run(["dvc", "init", "--force", "--quiet"])
    # print("Return code : {} = {}".format(type(p.returncode), p.returncode))
    if p.returncode == 0 : # success of subprocess.run
        print("CRMS initialized DVC...")
    else: # fail of subprocess.run
        print("CRMS failed of DVC initialization...")
        sys.exit(-1)

    #### DVC Remote Add
    p = subprocess.run(["dvc", "remote", "add",  "-d", "storage", configs['dvc']['remote'] + '/' + args.model_name, "--quiet" ])
    # print("Return code : {} = {}".format(type(p.returncode), p.returncode))
    if p.returncode == 0 : # success of subprocess.run
        print("CRMS added DVC remote (" + configs['dvc']['remote'] + '/' + args.model_name + ")")
    else: # fail of subprocess.run
        print("CRMS failed to DVC add remote...")
        sys.exit(-1)

    # #### CRMS Config File
    # path_crms = os.path.join(dir_path, ".crms")
    # if not os.path.exists(path_crms) :
    #     os.makedirs(path_crms)
    #     print("The new .crms directory is created!")

    # path_config = os.path.join(path_crms, "config")
    # with open(path_config, "at+") as f :
    #     f.write("model_name : {}\n".format(args.model_name))



    remotes = repo.remotes # [<git.Remote "origin">, ...]
    if len(remotes) <= 0 :
        print("!!!! git remote origin must be added after crms init.")
        print("!!!! Try: git remote add origin git@github.com:<user_name>/<repository_name.git>")    
#        sys.exit(-1)
        pass
    else:
        origin = remotes[0]   # <git.Remote "origin">
        urls = origin.urls    # <generator object Remote.urls at 0x7fa164d235f0>
        url = next(urls)
        print("CRMS uses Git Remote (" + url + ")")
        # with open(path_config, "at+") as f :
        #     f.write("git_remote : {}\n".format(url))



def crms_add(dir_path):
    print("CRMS ADD....")

def crms_push(dir_path):
    try :
        repo = Repo(dir_path)  # 'git init'  must be prepared before 'crms init'
    except git.exc.InvalidGitRepositoryError:
        print("Error: Invalid Git Repository. Check crms init was called...")
        sys.exit(-1)
    except git.exc.NoSuchPathError :
        print("Error: gir repoistory path could not be access by the system.")
        sys.exit(-1)
    except :
        print("Error: Unknown error occured while crms push")
        sys.exit(-1)

    remotes = repo.remotes # [<git.Remote "origin">, ...]
    if len(remotes) <= 0 :
        print("Error: git remote origin must be added before crms push.")
        print("Try: git remote add origin git@github.com:<user_name>/<repository_name.git>")    
        sys.exit(-1)

    origin = remotes[0]   # <git.Remote "origin">
    urls = origin.urls    # <generator object Remote.urls at 0x7fa164d235f0>
    url = next(urls)

    print("Git Repository URL : " + url)

    # p = subprocess.run(["dvc", "init"])
    pass

    print("CRMS PUSH....")

def crms_pull(dir_path):
    print("CRMS PULL....")


def crms(args):
    if args.cmd == 'conf' :
        print("CMD = CONF")
        crms_conf(os.getcwd(), args)
    elif args.cmd == 'init' :
        print("CMD = INIT")
        crms_init(os.getcwd(), args)
    elif args.cmd == 'add' :
        print("CMD = ADD")
        crms_add(os.getcwd())
    elif args.cmd == 'push' :
        print("CMD = PUSH")
        crms_push(os.getcwd())
    elif args.cmd == 'pull' :
        print("CMD = PULL")
        crms_pull(os.getcwd())
    else :
        print("Unknown CMD")


def arg_parse() :
    arg_parser = argparse.ArgumentParser(prog="crms", description="Cloud Robot Model Sharing CLI")

    sub_parsers = arg_parser.add_subparsers(dest="cmd", help="sub-command help", required=True)
    
    parser_conf =   sub_parsers.add_parser('conf',  help="CRMS CONFIG : crms conf <git_remote_url> <dvc_remote_base>" )
    parser_init =   sub_parsers.add_parser('init',  help="CRMS INIT : crms init <model_name>" )
    parser_add  =   sub_parsers.add_parser('add',   help="CRMS ADDS MODEL_FILES: crms add <model_files>...")
    parser_push =   sub_parsers.add_parser('push',  help="CRMS PUSHES MODEL_FILES With VERSION_TAG : crms push <version>")
    parser_pull =   sub_parsers.add_parser('pull',  help="CRMS PULL MODEL With VERSION_TAG : crms pull <model_name> [--version=<latest>|<version_tag>] [--target=<target_dir>] ")


    parser_conf.add_argument("git_remote_url", type=str,  action="store", help="git_remote_url is required")
    parser_conf.add_argument("dvc_remote_base", type=str,  action="store", help="dvc_remote_base is required")
    
    parent_parser = argparse.ArgumentParser(add_help=False)
    parent_parser.add_argument("--git_remote", type=str, default="", action="store", help="--git_remote=<git_remote_url>")
    child_parser = argparse.ArgumentParser(parents=[parent_parser])


    #parser_conf.add_argument("-g", "--git_remote", type=str,  default="", action="store", help="--git_remote=<git_remote_url>")
    #parser_conf.add_argument("-d", "--dvc_remote", type=str,  default="", action="store", help="--dvc_remote=<dvc_remote_url>")

    parser_init.add_argument("model_name", type=str,  action="store", help="model_name is required")

    parser_add.add_argument("model_files", type=str,  action="store", nargs="*", help="model_files are required")

    parser_push.add_argument("version", type=str,  action="store", help="version is required")

    parser_pull.add_argument("model_name",  action="store", help="model_name is required")
    parser_pull.add_argument("-v", "--version", type=str,  default="latest", action="store", help="--version=<latest>|<version_tag>")
    parser_pull.add_argument("-t", "--target", type=str,  default="", action="store", help="--target=<target_dir>")

    args = arg_parser.parse_args()
    return args


if __name__=='__main__':
    args = arg_parse()
    print(args)
    # print(dir(args))
    # print(type(args))
    crms(args)

